import time
import telebot
from telebot.types import ReplyKeyboardMarkup, BotCommand, BotCommandScope, InlineKeyboardMarkup, InlineKeyboardButton
from gpt import GPT
import logging
from database import (create_db, create_users_table, add_user_to_database, find_user_data, update_user_data,
                      count_subjects_popularity, find_latest_issues)
from settings import get_settings
from config import TOKEN, ADMIN

create_db()
create_users_table()

admin_id = int(ADMIN)

bot = telebot.TeleBot(token=TOKEN)

gpt = GPT()
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    datefmt="%Y-%m-%d %H",
    filename="log_file.txt",
    filemode="w",
    force=True
)


@bot.message_handler(commands=['debug'])
def send_logs(message):
    user_id = message.chat.id

    if user_id == admin_id:
        try:

            with open("log_file.txt", "rb") as f:
                bot.send_document(message.chat.id, f)

        except telebot.apihelper.ApiTelegramException:

            bot.send_message(message.chat.id, "–õ–æ–≥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")

    else:
        bot.send_message(message.chat.id, "–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


def check_user(user_id):
    if not find_user_data(user_id):
        add_user_to_database(user_id)
        logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")


def check_processing_answer(user_id, message):
    if find_user_data(user_id)['processing_answer'] == 1:
        logging.debug("–ø–æ–ø—ã—Ç–∫–∞ –∑–∞–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å, –∫–æ–≥–¥–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å —É–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥—Ä—É–≥–æ–π")

        bot.reply_to(message, "–ù–µ–π—Ä–æ—Å–µ—Ç—å —É–∂–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –í–∞—à –≤–æ–ø—Ä–æ—Å. –ü—Ä–µ–∂–¥–µ —á–µ–º –∑–∞–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π,"
                              " –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π.")
        return True
    return False


# –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_menu_keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add("–ó–∞–ø—É—Å–∫ GPT", "‚öôÔ∏è–ü–∞—Ä–∞–º–µ—Ç—Ä—ã", "üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")


def make_reply_keyboard(btns: list):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    for btn in btns:
        keyboard.add(btn)
    return keyboard


def make_inline_keyboard(data, user_id: None | int):
    keyboard = InlineKeyboardMarkup(row_width=1)

    back_btn = InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="go_back")

    if data in ['settings', 'go_back']:
        btn1 = InlineKeyboardButton(text="–ü—Ä–µ–¥–º–µ—Ç", callback_data="subject")
        btn2 = InlineKeyboardButton(text="–£—Ä–æ–≤–µ–Ω—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è", callback_data="level")
        keyboard.add(btn1, btn2)

    if data in ["subject", "level", "–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è", "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "–ù–æ–≤–∏—á–æ–∫", "–ü—Ä–æ—Ñ–∏"]:
        user_data = find_user_data(user_id)

        if data in ['subject', "–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è", "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è"]:

            current_subject = user_data["subject"]

            btn1_text = "üí´–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è"
            btn2_text = "üó∫Ô∏è–ì–µ–æ–≥—Ä–∞—Ñ–∏—è"

            if current_subject == "–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è":
                btn1_text += " ‚úÖ"

            elif current_subject == "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è":
                btn2_text += " ‚úÖ"

            btn1 = InlineKeyboardButton(text=btn1_text, callback_data="–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è")
            btn2 = InlineKeyboardButton(text=btn2_text, callback_data="–ì–µ–æ–≥—Ä–∞—Ñ–∏—è")

            keyboard.add(btn1, btn2, back_btn)

        elif data in ['level', "–ù–æ–≤–∏—á–æ–∫", "–ü—Ä–æ—Ñ–∏"]:

            current_level = user_data["level"]

            btn1_text = "–ù–æ–≤–∏—á–æ–∫"
            btn2_text = "–ü—Ä–æ—Ñ–∏"

            if current_level == "–ù–æ–≤–∏—á–æ–∫":
                btn1_text += " ‚úÖ"

            elif current_level == "–ü—Ä–æ—Ñ–∏":
                btn2_text += " ‚úÖ"

            btn1 = InlineKeyboardButton(text=btn1_text, callback_data="–ù–æ–≤–∏—á–æ–∫")
            btn2 = InlineKeyboardButton(text=btn2_text, callback_data="–ü—Ä–æ—Ñ–∏")

            keyboard.add(btn1, btn2, back_btn)
    return keyboard


# —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç
@bot.message_handler(commands=["start"])
def start_bot(message):
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    commands = [  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
        BotCommand('start', '–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'),
        BotCommand('help', '—É–∑–Ω–∞–π—Ç–µ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö'),
        BotCommand('settings', '–∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏'),
        BotCommand('talk', '–Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é'),
        BotCommand('exit', '–∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é'),
        BotCommand('stats', '–ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞')
    ]

    bot.set_my_commands(commands)
    BotCommandScope('private', chat_id=message.chat.id)
    user_id = message.from_user.id  # —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    check_user(user_id)  # –¥–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –≤ –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–∞ —Å–ª—É—á–∞–π, —á—Ç–æ–±—ã –Ω–µ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –µ—Å–ª–∏ –±–¥ —É–¥–∞–ª–µ–Ω–∞.

    # —ç—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–∫–∂–µ –µ—Å—Ç—å –≤–µ–∑–¥–µ, —á—Ç–æ–±—ã –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
    if check_processing_answer(user_id, message):
        return

    #  –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é. '
                                      '—Ç—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∞—Å—Ç—Ä–æ–Ω–æ–º–∏–∏ –∏ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏. '
                                      '–¢–∞–∫–∂–µ —è –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –í–∞–º –≤'
                                      '–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è –∑–Ω–∞–Ω–∏–π.\n\n'
                                      '–ß—Ç–æ–±—ã —è —Å–º–æ–≥ –ª—É—á—à–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å,'
                                      ' –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ø–∞—Ä–∞–º–µ—Ç—Ä—ã" –∏ —Å–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä.\n\n'
                                      '–í—ã –º–æ–∂–µ—Ç–µ –Ω–µ –¥–µ–ª–∞—Ç—å —ç—Ç–æ–≥–æ, —Ç–æ–≥–¥–∞ –±—É–¥—É—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:\n'
                                      '–ü—Ä–µ–¥–º–µ—Ç: –ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è\n'
                                      '–£—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π: –ù–∞—á–∏–Ω–∞—é—â–∏–π', reply_markup=main_menu_keyboard)


# —Ñ—É–Ω–∫—Ü–∏–∏
@bot.message_handler(commands=["help"])
def tell_about_bot(message):
    text = ("–ü—Ä–∏–≤–µ—Ç! –¢—É—Ç –í—ã –Ω–∞–π–¥–µ—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö.\n\n"
            "/start - –ø—Ä–æ—Å–Ω—É—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ, –∑–∞–±—ã–≤ –≤—Å—é —Å–≤–æ—é –ø—Ä–æ—à–ª—É—é –∂–∏–∑–Ω—å! –¢–æ–ª—å–∫–æ –¥–ª—è –±–æ—Ç–∞...\n\n"
            "/help - –ø–æ–º–æ–∂–µ—Ç –í–∞–º —É–∑–Ω–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö\n\n"
            '/settings –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã" - –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ–π—Ä–æ—Å–µ—Ç—å –ª—É—á—à–µ '
            '–ø–æ–π–º–µ—Ç, –∫–∞–∫ –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç—å.\n\n'
            '/talk –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ "–ó–∞–ø—É—Å–∫ GPT" - –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–Ω–µ –≤—ã—Å—Ç—É–ø–∏—Ç—å –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–º –º–µ–∂–¥—É –í–∞–º–∏ –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é, –∞ –í–∞–º - '
            '–ø–æ–ª—É—á–∏—Ç—å –æ—Ç –Ω–µ–µ –æ—Ç–≤–µ—Ç –Ω–∞ –í–∞—à –≤–æ–ø—Ä–æ—Å.\n\n'
            '–ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –í–∞—à –≤–æ–ø—Ä–æ—Å, –í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –µ–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–≤–æ–π –æ—Ç–≤–µ—Ç, –Ω–∞–∂–∞–≤ –Ω–∞'
            ' –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏!"\n\n'
            '/exit –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ "–í—ã—Ö–æ–¥" - –ø–æ–∑–≤–æ–ª–∏—Ç –í–∞–º –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é.\n\n'
            '/stats –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" - –ø–æ–∫–∞–∂–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.')

    user_id = message.from_user.id

    if check_processing_answer(user_id, message):
        return

    bot.reply_to(message, text=text)

    logging.info("—Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")


@bot.message_handler(commands=['settings'])
@bot.message_handler(content_types=['text'], func=lambda message: message.text.lower() == "‚öôÔ∏è–ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
def settings(message):
    c_id = message.chat.id

    user_id = message.from_user.id
    check_user(user_id)

    if check_processing_answer(user_id, message):
        return
    previous_msg = find_user_data(user_id)['settings_msg_id']

    if message.text.lower() == "–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        bot.send_message(c_id, '–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–ø—É—Å–∫ GPT"',
                         reply_markup=main_menu_keyboard)

        for i in range(0, 3):  # —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
            m_id = previous_msg - i
            bot.delete_message(chat_id=c_id, message_id=m_id)
            update_user_data(user_id, "settings_msg_id", -1)

        return

    if message.text.lower() in ["‚öôÔ∏è–ø–∞—Ä–∞–º–µ—Ç—Ä—ã", "/settings", "–ø–∞—Ä–∞–º–µ—Ç—Ä—ã"]:
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")  # –º–µ–Ω—è–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

        bot.send_message(c_id, "–ü–µ—Ä–µ—Ö–æ–∂—É –≤ —Ä–µ–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–∫...", reply_markup=keyboard)
        time.sleep(0.5)

        keyboard = make_inline_keyboard('settings', None)  # –º–µ–Ω—è–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

        msg = bot.send_message(chat_id=c_id, text="–ö–∞–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=keyboard)

        if previous_msg != -1:  # —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
            for i in range(0, 3):
                m_id = previous_msg - i
                bot.delete_message(chat_id=c_id, message_id=m_id)

        update_user_data(user_id, "settings_msg_id", msg.message_id)

    else:
        bot.delete_message(chat_id=c_id, message_id=message.message_id)

    bot.register_next_step_handler(message, settings)


# –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –±–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –≤–æ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
@bot.message_handler(commands=["delete_process_resp"])
def delete_process_resp(message):
    user_id = message.from_user.id
    if user_id == admin_id:
        update_user_data(user_id, 'processing_answer', 0)
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    else:
        bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")


@bot.message_handler(commands=["stats"])
@bot.message_handler(content_types=['text'], func=lambda message: message.text.lower() == "üìä—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def show_statistics(message):
    user_id = message.from_user.id

    check_user(user_id)
    if check_processing_answer(user_id, message):
        return

    user_data = find_user_data(user_id)
    subjects_popularity = count_subjects_popularity()
    most_popular_subject = []

    if subjects_popularity:

        for subject, value in subjects_popularity.items():

            if value == max(subjects_popularity.values()):
                most_popular_subject.append(subject)
                most_popular_subject.append(value)

    latest_tasks = find_latest_issues()
    tasks_text = ""

    if latest_tasks[0]:
        for i, task in enumerate(latest_tasks):
            if task:
                tasks_text += f'{i + 1}. "{task}"\n'

    else:
        tasks_text = "–ó–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"

    bot.send_message(message.chat.id, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –í–∞—à–∞ –∏ –æ–±—â–∞—è:\n\n"
                                      "<b>–õ–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n</b>"
                                      f"<b>–í–∞—à–µ –∏–º—è:</b> {message.from_user.first_name}\n"
                                      f"<b>–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç:</b> {user_data['subject']}\n"
                                      f"<b>–í—ã–±—Ä–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è:</b> {user_data['level']}\n"
                                      f"<b>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤:</b> {user_data['number_of_tasks']}\n\n\n"
                                      "<b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n</b>"
                                      f"<b>–°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:</b> {most_popular_subject[0]}\n"
                                      f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏—Ö –µ–≥–æ:</b> {most_popular_subject[1]}\n"
                                      f"<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:</b>\n\n{tasks_text}", parse_mode='html')


# —Ä–∞–±–æ—Ç–∞ —Å GPT
@bot.message_handler(content_types=['text'], func=lambda message: message.text.lower() == "–∑–∞–ø—É—Å–∫ gpt")
@bot.message_handler(commands=['talk'])
def take_issue(message):
    user_id = message.from_user.id

    check_user(user_id)
    if check_processing_answer(user_id, message):
        return

    bot.send_message(message.chat.id, '–ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –í–∞—à –≤–æ–ø—Ä–æ—Å.\n\n'
                                      '–í–∞–∂–Ω–æ:\n\n'
                                      "0. –ù–µ–π—Ä–æ—Å–µ—Ç—å –ø—Ä–∏–∑–≤–∞–Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∞—Å—Ç—Ä–æ–Ω–æ–º–∏–∏ –∏–ª–∏ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏"
                                      " (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–≥–æ –≤—ã–±–æ—Ä–∞) –∏ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º —É—Ä–æ–≤–Ω–µ (–Ω–æ–≤–∏—á–æ–∫ –∏–ª–∏ –ø—Ä–æ—Ñ–∏),"
                                      " –ø–æ—ç—Ç–æ–º—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª—É—á—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å–ª–µ–¥—É–µ—Ç "
                                      "–∑–∞–¥–∞–≤–∞—Ç—å –µ–π –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –¥–∞–Ω–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–æ–π."
                                      '\n\n1. –ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–º,'
                                      ' –∏–Ω–∞—á–µ —É –í–∞—Å –ø—Ä–æ—Å—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –µ–≥–æ —Å–¥–µ–ª–∞—Ç—å.\n\n'
                                      '2. –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, —Ç–æ'
                                      ' —Å–º–µ–ª–æ –∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏!", '
                                      '–∫–æ—Ç–æ—Ä–∞—è –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –í–∞—à–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.\n\n'
                                      '3. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —á—Ç–æ-—Ç–æ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö,'
                                      ' —Ç–æ –í–∞–º –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ '
                                      '–∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é. –ò–Ω–∞—á–µ –∫–æ–º–∞–Ω–¥–∞ –±—É–¥–µ—Ç –≤–æ—Å–ø—Ä–∏–Ω—è—Ç–∞ –∫–∞–∫ –∑–∞–ø—Ä–æ—Å.',
                     reply_markup=make_reply_keyboard(["–í—ã—Ö–æ–¥"]))

    logging.info("—Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–æ–º—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

    bot.register_next_step_handler(message, ask_gpt)


def ask_gpt(message):
    user_id = message.from_user.id

    check_user(user_id)
    if check_processing_answer(user_id, message):
        return

    prompt = message.text

    if not prompt:  # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è

        logging.error("–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞")

        bot.send_message(message.chat.id, "–ö–∞–∂–µ—Ç—Å—è, –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å. –Ø –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –ø—Ä–∏–Ω–∏–º–∞—Ç—å"
                                          " —Ç–∞–∫–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ!")

        bot.register_next_step_handler(message, ask_gpt)

        return

    if prompt in ["–í—ã—Ö–æ–¥", "/exit", "–≤—ã—Ö–æ–¥"]:
        bot.send_message(message.chat.id, "–î–æ —Å–∫–æ—Ä–æ–≥–æ!", reply_markup=main_menu_keyboard)
        logging.info("–≤—ã—Ö–æ–¥ –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return

    user_data = find_user_data(user_id)

    if prompt.lower() == "–ø—Ä–æ–¥–æ–ª–∂–∏!":

        if user_data['answer'] == "":
            logging.error("–ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –∫–æ–≥–¥–∞ –≤–æ–ø—Ä–æ—Å –µ—â–µ –Ω–µ –±—ã–ª–∞ –∑–∞–¥–∞–Ω")

            bot.reply_to(message, "–¢–∞–∫ –∫–∞–∫ –∑–∞–ø—Ä–æ—Å–∞ –µ—â–µ –Ω–µ –±—ã–ª–æ, —Ç–æ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–æ–∫–∞ –Ω–µ—á–µ–≥–æ. –ß—Ç–æ–±—ã "
                                  "–≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω–æ–π –æ–ø—Ü–∏–µ–π, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.")
            bot.register_next_step_handler(message, ask_gpt)
            return

    else:
        update_user_data(user_id, 'answer', "")
        update_user_data(user_id, 'task', "")

    update_user_data(user_id, 'processing_answer', 1)

    previous_answer = user_data['answer']

    current_subject = user_data["subject"]
    current_level = user_data["level"]
    settings_for_prompt = get_settings(subject=current_subject, level=current_level)

    msg = bot.reply_to(message=message, text="–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! –£–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
    bot.send_chat_action(message.chat.id, "TYPING")
    answer_gpt = gpt.make_prompt(user_content=prompt, gpt_answer=previous_answer, system_prompt=settings_for_prompt)

    update_user_data(user_id, 'processing_answer', 0)
    update_user_data(user_id, 'answer', answer_gpt[2])  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)

    if prompt.lower() != "–ø—Ä–æ–¥–æ–ª–∂–∏!":
        update_user_data(user_id, 'task', prompt)
        update_user_data(user_id, "number_of_tasks", user_data["number_of_tasks"] + 1)

    bot.delete_message(chat_id=message.chat.id, message_id=msg.message_id)

    if not answer_gpt[0]:  # –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –æ–∫–æ–Ω—á–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞

        if answer_gpt[1] == "–û—Ç–≤–µ—Ç –æ–∫–æ–Ω—á–µ–Ω.\n\n–ñ–¥—É –í–∞—à–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤!":

            logging.info("–æ—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –æ–∫–æ–Ω—á–µ–Ω")

        else:

            logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {answer_gpt[1]}")

        bot.send_message(message.chat.id, answer_gpt[1], reply_markup=make_reply_keyboard(["–í—ã—Ö–æ–¥"]))

    else:  # –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—à–µ–ª
        bot.reply_to(message, answer_gpt[1], reply_markup=make_reply_keyboard(["–ü—Ä–æ–¥–æ–ª–∂–∏!", "–í—ã—Ö–æ–¥"]))

        logging.info("–û—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω")

    bot.register_next_step_handler(message, ask_gpt)


# –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å—Ç–∞–ª—å–Ω—É—é –≤—Å—è–∫—É—é –≤—Å—è—á–∏–Ω—É, –∫–æ—Ç–æ—Ä—É—é –æ—á–µ–Ω—å —Ä–µ–¥–∫–æ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç
CONTENT_TYPES = ["text", "audio", "document", "photo", "sticker", "video", "video_note", "voice"]


@bot.message_handler(content_types=CONTENT_TYPES)
def any_msg(message):
    user_id = message.from_user.id

    if find_user_data(user_id)['processing_answer'] == 1:

        logging.debug("–ø–æ–ø—ã—Ç–∫–∞ –∑–∞–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å, –∫–æ–≥–¥–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å —É–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥—Ä—É–≥–æ–π")

        bot.reply_to(message, "–ù–µ–π—Ä–æ—Å–µ—Ç—å —É–∂–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –í–∞—à –≤–æ–ø—Ä–æ—Å. –ü—Ä–µ–∂–¥–µ —á–µ–º –∑–∞–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π,"
                              " –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π.")

    else:

        logging.debug("–ø–æ–ø—ã—Ç–∫–∞ –æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º")

        bot.send_message(message.chat.id, 'üëç \n'
                                          '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, —Ç–æ —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É"–ó–∞–ø—É—Å–∫ GPT"',
                         reply_markup=main_menu_keyboard)


# –¥—Ä—É–∂–µ–ª—é–±–Ω–æ—Å—Ç—å –∏ –≤–µ–∂–ª–∏–≤–æ—Å—Ç—å –±–æ—Ç–∞
def filter_bye(message):
    word = "–ø–æ–∫–∞"
    return word in message.text.lower()


def filter_hi(message):
    word = "–ø—Ä–∏–≤–µ—Ç"
    return word in message.text.lower()


def filter_wasup(message):
    word = "–∫–∞–∫ –¥–µ–ª–∞?"
    return word in message.text.lower()


@bot.message_handler(content_types=['text'], func=filter_bye)
def say_bye(message):
    user_name = message.from_user.first_name
    logging.info("—Å –∫–µ–º-—Ç–æ –ø–æ–ø—Ä–æ—â–∞–ª–∏—Å—å")
    bot.send_message(message.from_user.id, text=f"{user_name}, –ø–æ–∫–∞...")


@bot.message_handler(content_types=['text'], func=filter_wasup)
def say_wasup(message):
    logging.info("–∫–æ–º—É-—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª–∏, –∫–∞–∫ –¥–µ–ª–∞")
    bot.send_message(message.from_user.id, text=f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å–ø—Ä–æ—Å–∏–ª_–∞! –î–µ–ª–∞ –æ—Ç–ª–∏—á–Ω–æ! üëç")


@bot.message_handler(content_types=['text'], func=filter_hi)
def say_wasup(message):
    user_name = message.from_user.first_name
    logging.info("—Å –∫–µ–º-—Ç–æ –ø–æ–∑–¥–æ—Ä–æ–≤–∞–ª–∏—Å—å")
    bot.send_message(message.from_user.id, text=f"{user_name}, –ü—Ä–∏–≤–µ—Ç! üôÉ")


@bot.callback_query_handler(func=lambda call: True)
def process_calls(call):
    c_id = call.message.chat.id
    m_id = call.message.message_id
    user_id = call.from_user.id

    check_user(user_id)
    if check_processing_answer(user_id, call.message):
        return

    data = call.data
    text = ""

    if data == "subject":
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:"

    if data == "level":
        text = "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è:"

    if data in ["–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è", "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è"]:
        update_user_data(user_id, "subject", value=data)
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:"

    if data in ["–ù–æ–≤–∏—á–æ–∫", "–ü—Ä–æ—Ñ–∏"]:
        update_user_data(user_id, "level", value=data)
        text = "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è:"

    if data == "go_back":
        text = "–ö–∞–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"

    keyboard = make_inline_keyboard(data, user_id=user_id)

    bot.edit_message_text(chat_id=c_id, message_id=m_id, text=text, reply_markup=keyboard)


# –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ üéâ
if __name__ == "__main__":
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.infinity_polling()
